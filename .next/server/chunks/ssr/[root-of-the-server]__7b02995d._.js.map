{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 223, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.5-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 244, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/smart-mentor-matching.ts"],"sourcesContent":["// This file is machine-generated - edit at your own risk!\n\n'use server';\n\n/**\n * @fileOverview An AI agent for suggesting mentor-mentee matches based on interests, goals, and backgrounds.\n *\n * - suggestMentorMatches - A function that suggests potential mentor-mentee matches.\n * - SmartMentorMatchingInput - The input type for the suggestMentorMatches function.\n * - SmartMentorMatchingOutput - The return type for the suggestMentorMatches function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst SmartMentorMatchingInputSchema = z.object({\n  menteeInterests: z.string().describe('The interests of the mentee.'),\n  menteeGoals: z.string().describe('The goals of the mentee.'),\n  menteeBackground: z.string().describe('The background information of the mentee.'),\n  mentorPool: z.array(z.object({\n    mentorId: z.string().describe('The unique identifier of the mentor.'),\n    mentorInterests: z.string().describe('The interests of the mentor.'),\n    mentorBackground: z.string().describe('The background information of the mentor.'),\n  })).describe('An array of potential mentors with their interests and backgrounds.'),\n  pastSuccessfulPairings: z.string().describe('Data on past successful mentor-mentee pairings, including their attributes and outcomes.'),\n});\n\nexport type SmartMentorMatchingInput = z.infer<typeof SmartMentorMatchingInputSchema>;\n\nconst SmartMentorMatchingOutputSchema = z.array(z.object({\n  mentorId: z.string().describe('The unique identifier of the suggested mentor.'),\n  compatibilityScore: z.number().describe('A score indicating the compatibility between the mentee and the suggested mentor.'),\n  rationale: z.string().describe('The rationale behind the compatibility score, explaining why this mentor is a good match for the mentee based on their interests, goals, and background.'),\n})).describe('An array of suggested mentors with compatibility scores and rationales.');\n\nexport type SmartMentorMatchingOutput = z.infer<typeof SmartMentorMatchingOutputSchema>;\n\nexport async function suggestMentorMatches(input: SmartMentorMatchingInput): Promise<SmartMentorMatchingOutput> {\n  return smartMentorMatchingFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'smartMentorMatchingPrompt',\n  input: {schema: SmartMentorMatchingInputSchema},\n  output: {schema: SmartMentorMatchingOutputSchema},\n  prompt: `You are an AI assistant that suggests potential mentors for a mentee based on their interests, goals, and background.\n\nYou are provided with the mentee's information, a pool of potential mentors with their information, and data on past successful mentor-mentee pairings.\n\nYour task is to analyze the information and suggest the best mentors for the mentee, providing a compatibility score and rationale for each suggestion.\n\nMentee Interests: {{{menteeInterests}}}\nMentee Goals: {{{menteeGoals}}}\nMentee Background: {{{menteeBackground}}}\n\nMentor Pool:\n{{#each mentorPool}}\n  - Mentor ID: {{{mentorId}}}\n    Interests: {{{mentorInterests}}}\n    Background: {{{mentorBackground}}}\n{{/each}}\n\nPast Successful Pairings: {{{pastSuccessfulPairings}}}\n\nBased on this information, suggest the best mentors for the mentee, providing a compatibility score (out of 100) and a rationale for each suggestion. The output should be a valid JSON array.\n`,\n});\n\nconst smartMentorMatchingFlow = ai.defineFlow(\n  {\n    name: 'smartMentorMatchingFlow',\n    inputSchema: SmartMentorMatchingInputSchema,\n    outputSchema: SmartMentorMatchingOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":"AAAA,0DAA0D;;;;;;AAI1D;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,iCAAiC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC9C,iBAAiB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACrC,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACjC,kBAAkB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACtC,YAAY,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QAC3B,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QAC9B,iBAAiB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QACrC,kBAAkB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACxC,IAAI,QAAQ,CAAC;IACb,wBAAwB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC9C;AAIA,MAAM,kCAAkC,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACvD,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC9B,oBAAoB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACxC,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACjC,IAAI,QAAQ,CAAC;AAIN,eAAe,qBAAqB,KAA+B;IACxE,OAAO,wBAAwB;AACjC;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAA8B;IAC9C,QAAQ;QAAC,QAAQ;IAA+B;IAChD,QAAQ,CAAC;;;;;;;;;;;;;;;;;;;;AAoBX,CAAC;AACD;AAEA,MAAM,0BAA0B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC3C;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IAxCoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 332, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/matching/actions.ts"],"sourcesContent":["'use server';\n\nimport { suggestMentorMatches } from '@/ai/flows/smart-mentor-matching';\nimport type { MenteeProfile, Mentor, MatchResult } from '@/lib/types';\n\n// Mock data for mentor pool and past pairings\nconst mockMentors: Mentor[] = [\n  {\n    mentorId: 'mentor-1',\n    name: 'Dr. Evelyn Reed',\n    title: 'Lead Agricultural Scientist',\n    mentorInterests: 'Sustainable farming, crop science, agritech startups',\n    mentorBackground: 'PhD in Agronomy, 20+ years of experience in research and development. Passionate about mentoring young innovators in agriculture.',\n    avatarUrl: 'https://picsum.photos/seed/20/100/100',\n  },\n  {\n    mentorId: 'mentor-2',\n    name: 'Samuel Chen',\n    title: 'Software Engineer @ Google',\n    mentorInterests: 'Web development, AI/ML, career growth in tech',\n    mentorBackground: 'Senior Software Engineer with a decade of experience building large-scale systems. Co-founded a non-profit for teaching code to underprivileged youth.',\n    avatarUrl: 'https://picsum.photos/seed/21/100/100',\n  },\n  {\n    mentorId: 'mentor-3',\n    name: 'Aisha Jalloh',\n    title: 'Founder & CEO, KaziConnect',\n    mentorInterests: 'Entrepreneurship, social impact, digital marketing for startups',\n    mentorBackground: 'Serial entrepreneur with two successful exits. Focused on building businesses that solve real-world problems in emerging markets. Forbes 30 Under 30.',\n    avatarUrl: 'https://picsum.photos/seed/22/100/100',\n  },\n];\n\nconst mockPastPairings = `\n- A mentee interested in 'mobile app development' was paired with a 'Senior Mobile Engineer'. Outcome: Mentee successfully launched their first app on the App Store.\n- A mentee aiming for 'a career in renewable energy' was paired with a 'Project Manager at a solar energy company'. Outcome: Mentee secured an internship and later a full-time role in the sector.\n- A mentee from a rural area interested in 'modernizing their family farm' was paired with an 'Agritech consultant'. Outcome: Mentee implemented a new irrigation system that increased crop yield by 40%.\n`;\n\n\nexport async function getMentorSuggestions(menteeProfile: MenteeProfile): Promise<{ success: boolean; suggestions?: MatchResult[]; error?: string; }> {\n  try {\n    const suggestions = await suggestMentorMatches({\n      menteeInterests: menteeProfile.menteeInterests,\n      menteeGoals: menteeProfile.menteeGoals,\n      menteeBackground: menteeProfile.menteeBackground,\n      mentorPool: mockMentors.map(({ mentorId, mentorInterests, mentorBackground }) => ({\n        mentorId,\n        mentorInterests,\n        mentorBackground,\n      })),\n      pastSuccessfulPairings: mockPastPairings,\n    });\n    \n    // Combine AI suggestions with full mentor details\n    const populatedSuggestions: MatchResult[] = suggestions.map(suggestion => {\n        const mentorDetails = mockMentors.find(m => m.mentorId === suggestion.mentorId);\n        return {\n            ...suggestion,\n            ...mentorDetails,\n        }\n    });\n\n    return { success: true, suggestions: populatedSuggestions };\n  } catch (error) {\n    console.error('Error getting mentor suggestions:', error);\n    return { success: false, error: 'Failed to get suggestions. Please try again.' };\n  }\n}\n"],"names":[],"mappings":";;;;;AAEA;;;;;AAGA,8CAA8C;AAC9C,MAAM,cAAwB;IAC5B;QACE,UAAU;QACV,MAAM;QACN,OAAO;QACP,iBAAiB;QACjB,kBAAkB;QAClB,WAAW;IACb;IACA;QACE,UAAU;QACV,MAAM;QACN,OAAO;QACP,iBAAiB;QACjB,kBAAkB;QAClB,WAAW;IACb;IACA;QACE,UAAU;QACV,MAAM;QACN,OAAO;QACP,iBAAiB;QACjB,kBAAkB;QAClB,WAAW;IACb;CACD;AAED,MAAM,mBAAmB,CAAC;;;;AAI1B,CAAC;AAGM,eAAe,qBAAqB,aAA4B;IACrE,IAAI;QACF,MAAM,cAAc,MAAM,CAAA,GAAA,iJAAA,CAAA,uBAAoB,AAAD,EAAE;YAC7C,iBAAiB,cAAc,eAAe;YAC9C,aAAa,cAAc,WAAW;YACtC,kBAAkB,cAAc,gBAAgB;YAChD,YAAY,YAAY,GAAG,CAAC,CAAC,EAAE,QAAQ,EAAE,eAAe,EAAE,gBAAgB,EAAE,GAAK,CAAC;oBAChF;oBACA;oBACA;gBACF,CAAC;YACD,wBAAwB;QAC1B;QAEA,kDAAkD;QAClD,MAAM,uBAAsC,YAAY,GAAG,CAAC,CAAA;YACxD,MAAM,gBAAgB,YAAY,IAAI,CAAC,CAAA,IAAK,EAAE,QAAQ,KAAK,WAAW,QAAQ;YAC9E,OAAO;gBACH,GAAG,UAAU;gBACb,GAAG,aAAa;YACpB;QACJ;QAEA,OAAO;YAAE,SAAS;YAAM,aAAa;QAAqB;IAC5D,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,qCAAqC;QACnD,OAAO;YAAE,SAAS;YAAO,OAAO;QAA+C;IACjF;AACF;;;IA5BsB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 418, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/%28app%29/matching/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {getMentorSuggestions as '40ff8090a812e296d63f955e88ce7dca5da437e965'} from 'ACTIONS_MODULE0'\nexport {suggestMentorMatches as '403dbf571e783c9140bd3e16c28ba064b9db3713bb'} from 'ACTIONS_MODULE1'\n"],"names":[],"mappings":";AAAA;AACA","debugId":null}},
    {"offset": {"line": 482, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/matching/matching-client.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const MatchingClient = registerClientReference(\n    function() { throw new Error(\"Attempted to call MatchingClient() from the server but MatchingClient is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/matching/matching-client.tsx <module evaluation>\",\n    \"MatchingClient\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,iBAAiB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAChD;IAAa,MAAM,IAAI,MAAM;AAA4O,GACzQ,6EACA","debugId":null}},
    {"offset": {"line": 496, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/matching/matching-client.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const MatchingClient = registerClientReference(\n    function() { throw new Error(\"Attempted to call MatchingClient() from the server but MatchingClient is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/matching/matching-client.tsx\",\n    \"MatchingClient\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,iBAAiB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAChD;IAAa,MAAM,IAAI,MAAM;AAA4O,GACzQ,yDACA","debugId":null}},
    {"offset": {"line": 510, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 520, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/%28app%29/matching/page.tsx"],"sourcesContent":["import { MatchingClient } from '@/components/matching/matching-client';\nimport { getMentorSuggestions } from '@/components/matching/actions';\n\nexport default function SmartMatchingPage() {\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold font-headline tracking-tight\">Smart Mentor Matching</h1>\n        <p className=\"text-muted-foreground mt-1\">\n          Tell us about yourself, and our AI will suggest the best mentors to help you achieve your goals.\n        </p>\n      </div>\n      <MatchingClient getMentorSuggestions={getMentorSuggestions} />\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;;;;AAEe,SAAS;IACtB,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC;;kCACC,8OAAC;wBAAG,WAAU;kCAAkD;;;;;;kCAChE,8OAAC;wBAAE,WAAU;kCAA6B;;;;;;;;;;;;0BAI5C,8OAAC,oJAAA,CAAA,iBAAc;gBAAC,sBAAsB,wIAAA,CAAA,uBAAoB;;;;;;;;;;;;AAGhE","debugId":null}}]
}